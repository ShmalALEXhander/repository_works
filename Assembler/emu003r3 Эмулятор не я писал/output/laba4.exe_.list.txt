EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
laba4.exe_.list -- emu8086 assembler version: 0.03  
 
[ 17.05.2023  --  21:42:03 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   0]        :                                       
[   1]        :                                       data segment
[   2]    0000: 10 42 08 01 00 00                     mass db 10h, 42h, 8, 1, 0, 0
[   3]        :                                       ; 123, 234, 55, 66, 107, 208
[   4]    0006: 00 00                                 bit dw 0
[   5]        :                                       data ends
[   6]        :                                       code segment
[   7]        :                                       assume cs: code, ds: data
[   8]    0010:                                       start:
[   9]    0010: B8 00 00                              mov ax, data
[  10]    0013: 8E D8                                 mov ds, ax ; Загрузить сегментный адрес данных
[  11]        :                                       
[  12]    0015: BB 00 00                              mov bx, 0
[  13]    0018: BA 00 00                              mov dx, 0
[  14]    001B: B8 00 00                              mov ax, 0
[  15]    001E: 89 1E 06 00                           mov bit, bx
[  16]    0022:                                       beg:
[  17]    0022: A1 06 00                              mov ax, bit
[  18]    0025: B3 08                                 mov bl, 8
[  19]    0027: F6 F3                                 div bl
[  20]    0029: 8A D8                                 mov bl, al
[  21]    002B: 8A 07                                 mov al, [mass + bx] ; получить нужный байт  - bx позволяет переместится сразу на байт/ индекс байта в массиве
[  22]        :                                       
[  23]    002D: 8A CC                                 mov cl, ah
[  24]    002F: FE C9                                 dec    cl
[  25]    0031: D2 E8                                 shr al, cl  ; получить бит из байта
[  26]        :                                       
[  27]    0033: 24 01                                 and al, 1 ; Возвращает в al destination    source ( связано с операнда и не с сетями)
[  28]    0035: 3C 00                                 cmp al, 0
[  29]    0037: 74 01                                 je no
[  30]    0039: 42                                    inc dx
[  31]    003A:                                       no:
[  32]    003A: B8 05 00                              mov ax, 5
[  33]    003D: 03 06 06 00                           add ax, bit
[  34]    0041: A3 06 00                              mov bit, ax
[  35]        :                                       
[  36]    0044: 3D 30 00                              cmp ax, 6*8 ; а не достигли ли мы конца
[  37]    0047: 7C D9                                 jl beg
[  38]        :                                       
[  39]    0049:                                       quit:
[  40]    0049: B8 00 4C                              mov ax, 4C00h ; Код завершения 0
[  41]    004C: CD 21                                 int 21h ; Выход в DOS
[  42]        :                                       code ends
[  43]        :                                       end start
[  44]        :                                       
[  45]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 4E      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 8E      -   check sum (l.byte)
0013: 83      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
