EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
0000.exe_.list -- emu8086 assembler version: 0.03  
 
[ 17.04.2023  --  9:29:13 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   0]        :                                       data segment
[   1]    0000: 20 FF 00 00 00 00                     mass db 32, 255, 0, 0, 0, 0
[   2]        :                                       ; 123, 234, 55, 66, 107, 208
[   3]    0006: 00 00                                 bit dw 0
[   4]        :                                       data ends
[   5]        :                                       code segment
[   6]        :                                       assume cs: code, ds: data
[   7]    0010:                                       start:
[   8]    0010: B8 00 00                              mov ax, data
[   9]    0013: 8E D8                                 mov ds, ax ; ????????? ?????????? ????? ??????
[  10]        :                                       
[  11]    0015: BB 00 00                              mov bx, 0
[  12]    0018: BA 00 00                              mov dx, 0
[  13]    001B: B8 00 00                              mov ax, 0
[  14]    001E: 89 1E 06 00                           mov bit, bx
[  15]    0022:                                       beg:
[  16]    0022: A1 06 00                              mov ax, bit
[  17]    0025: B3 08                                 mov bl, 8
[  18]    0027: F6 F3                                 div bl
[  19]    0029: 8A D8                                 mov bl, al
[  20]    002B: 8A 07                                 mov al, [mass + bx] ; ???????? ?????? ????
[  21]        :                                       
[  22]    002D: 8A CC                                 mov cl, ah
[  23]    002F: D2 E8                                 shr al, cl  ; ???????? ??? ?? ?????
[  24]        :                                       
[  25]    0031: 24 01                                 and al, 1
[  26]    0033: 3C 00                                 cmp al,0
[  27]    0035: 74 01                                 je no
[  28]    0037: 42                                    inc dx
[  29]    0038:                                       no:
[  30]    0038: B8 05 00                              mov ax, 5
[  31]    003B: 03 06 06 00                           add ax, bit
[  32]    003F: A3 06 00                              mov bit, ax
[  33]        :                                       
[  34]    0042: 3D 30 00                              cmp ax, 6*8 ; ? ?? ???????? ?? ?? ?????
[  35]    0045: 7C DB                                 jl beg
[  36]        :                                       
[  37]    0047:                                       quit:
[  38]    0047: B8 00 4C                              mov ax, 4C00h ; ??? ?????????? 0
[  39]    004A: CD 21                                 int 21h ; ????? ? DOS
[  40]        :                                       code ends
[  41]        :                                       end start
[  42]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 4C      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 4F      -   check sum (l.byte)
0013: C6      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
