EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Laba4FINAL1.exe_.list -- emu8086 assembler version: 0.03  
 
[ 18.05.2023  --  23:30:41 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   0]        :                                       data segment
[   1]    0000: 10 42 08 01                           mass db 10h, 42h, 8, 1
[   2]    0004: 00 00                                 bit dw 0
[   3]        :                                       data ends
[   4]        :                                       code segment
[   5]        :                                       assume cs: code, ds: data
[   6]    0010:                                       start:
[   7]    0010: B8 00 00                              mov ax, data
[   8]    0013: 8E D8                                 mov ds, ax ; Загрузить сегментный адрес данных
[   9]        :                                       
[  10]    0015:                                       next:
[  11]    0015: 83 06 04 00 05                        add bit, 5
[  12]    001A: A1 04 00                              mov ax, bit
[  13]        :                                       
[  14]    001D: 3D 30 00                              cmp ax, 6*8
[  15]    0020: 7D 1B                                 jge quit
[  16]    0022: B1 08                                 mov cl, 8
[  17]    0024: F6 F1                                 div cl
[  18]    0026: 8A 07                                 mov al, [mass + bx]
[  19]        :                                       
[  20]    0028: 8A D8                                 mov bl, al ; позиция массива = 0
[  21]    002A: 8A CC                                 mov cl, ah ; позиция элемента по разряду = 5
[  22]    002C: FE C9                                 dec cl
[  23]    002E: B4 80                                 mov ah, 80h
[  24]    0030: D2 EC                                 shr ah, cl ; shl
[  25]    0032: 22 C4                                 and al, ah ; на 5 по разряду сдвигаем в соответствии с заданием
[  26]    0034: 3C 00                                 cmp al, 0
[  27]    0036: 74 03                                 je no
[  28]    0038: 42                                    inc dx
[  29]    0039: EB DA                                 jmp next
[  30]    003B:                                       no:
[  31]    003B: EB D8                                 jmp next
[  32]    003D:                                       quit:
[  33]    003D: B8 00 4C                              mov ax, 4C00h ; Код завершения 0
[  34]    0040: CD 21                                 int 21h ; Выход в DOS
[  35]        :                                       
[  36]        :                                       code ends
[  37]        :                                       end start
[  38]        :                                       
[  39]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 42      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: D4      -   check sum (l.byte)
0013: 44      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
