EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
laba27.exe_.list -- emu8086 assembler version: 0.03  
 
[ 13.05.2023  --  14:48:19 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   0]        :                                       ;7.    Х= - (С + 2А + 4В + В)
[   1]        :                                       data segment
[   2]    0000: 0A 00                                 a dw 10
[   3]    0002: 18 00                                 b dw 24
[   4]    0004: 1E 00                                 c dw 30
[   5]    0006: 00 00                                 x dw ?
[   6]        :                                       data ends
[   7]        :                                       assume cs:code, ds:data
[   8]        :                                       code segment
[   9]    0010:                                       start:
[  10]    0010: B8 00 00                              mov ax, data
[  11]    0013: 8E D8                                 mov ds, ax
[  12]        :                                       
[  13]    0015: 8B 0E 04 00                           mov cx, c
[  14]    0019: A1 00 00                              mov ax, a
[  15]    001C: D1 E0                                 sal ax, 1
[  16]    001E: 03 C1                                 add ax, cx
[  17]    0020: 8B 1E 02 00                           mov bx, b
[  18]    0024: 03 C3                                 add ax, bx
[  19]    0026: D1 E3 D1 E3                           sal bx, 2
[  20]    002A: 03 C3                                 add ax, bx
[  21]    002C: 8B D0                                 mov dx, ax
[  22]    002E: B8 00 00                              mov ax, 0
[  23]    0031: 2B C2                                 sub ax, dx  ;nec - преобразование в дополнительный код
[  24]    0033: A3 06 00                              mov x, ax
[  25]        :                                       
[  26]    0036: B8 00 4C                              mov ax, 4C00h     ; Код завершения 0
[  27]    0039: CD 21                                 int 21h        ; Выход в DOS
[  28]        :                                       code ends
[  29]        :                                       end START
[  30]        :                                       
[  31]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 3B      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 1C      -   check sum (l.byte)
0013: 69      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
